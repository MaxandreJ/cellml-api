/* Is the CellML Context enabled? */
#cmakedefine ENABLE_CONTEXT

/* Are the GSL integrators enabled? */
#cmakedefine ENABLE_GSL_INTEGRATORS

/* Is Java enabled? */
#cmakedefine ENABLE_JAVA_BUILD
#define ENABLE_JAVA ENABLE_JAVA_BUILD

/* Is Python enabled? */
#cmakedefine ENABLE_PYTHON

/* Is RDF enabled? */
#cmakedefine ENABLE_RDF

/* Is SProS enabled? */
#cmakedefine ENABLE_SPROS

/* Is SRuS enabled? */
#undef ENABLE_SRUS

/* Is TeLiCeMs enabled? */
#cmakedefine ENABLE_TELICEMS

/* Is XPCOM enabled? */
#cmakedefine ENABLE_XPCOM

/* Define to 1 if you have the <inttypes.h> header file. */
#cmakedefine HAVE_HEADER_INTTYPES_H 1

/* Define to 1 if you have the <sys/types.h> header file. */
#cmakedefine HAVE_SYS_TYPES_H 1

/* Define to 1 if you have the <JavaVM/jni.h> header file. */
#cmakedefine HAVE_JAVAVM_JNI_H 1

/* Define to 1 if you have the <jni.h> header file. */
#cmakedefine HAVE_JNI_H 1

/* Define to 1 if you have the `gsl' library (-lgsl). */
#cmakedefine HAVE_LIBGSL 1

/* Define to 1 if you have the `gslcblas' library (-lgslcblas). */
#cmakedefine HAVE_LIBGSLCBLAS 1

/* Define if gcc visibility attributes supported */
#cmakedefine HAVE_VISIBILITY_ATTRIBUTE

/* Define if we are using the system libxml2 */
#cmakedefine USE_SYSTEM_LIBXML2

/* The size of `wchar_t*', as computed by sizeof. */
#define SIZEOF_WCHAR_TP ${SIZEOF_WCHAR_TP}

/* Define TESTDIR to path of test sources. */
#define TESTDIR L"${CMAKE_CURRENT_SOURCE_DIR}/tests"

/* Define TESTDIR to path of test sources. */
#define TESTDIR8 "${CMAKE_CURRENT_SOURCE_DIR}/tests"

/* Is LLVM found? */
#cmakedefine LLVM_FOUND
#ifdef LLVM_FOUND
#define ENABLE_CLANG
#endif

#define SIZE_INT64_T ${SIZE_INT64_T}
#if ! (SIZE_INT64_T + 0)
#undef int64_t
#ifdef WIN32
typedef signed __int64 int64_t;
#else
typedef signed long long int64_t;
#endif
#endif
#define SIZE_UINT64_T ${SIZE_UINT64_T}
#if ! (SIZE_UINT64_T + 0)
#undef uint64_t
#ifdef WIN32
typedef unsigned __int64 uint64_t;
#else
typedef unsigned long long uint64_t;
#endif
#endif
#define SIZE_INT32_T ${SIZE_INT32_T}
#if ! (SIZE_INT32_T + 0)
typedef signed long int32_t;
#endif
#define SIZE_UINT32_T ${SIZE_UINT32_T}
#if ! (SIZE_INT32_T + 0)
typedef unsigned long uint32_t;
#endif
#define SIZE_INT16_T ${SIZE_INT16_T}
#if ! (SIZE_INT16_T + 0)
typedef short int16_t;
#endif
#define SIZE_UINT16_T ${SIZE_UINT16_T}
#if ! (SIZE_UINT16_T + 0)
typedef unsigned short uint16_t;
#endif
#define SIZE_INT8_T ${SIZE_INT8_T}
#if ! (SIZE_INT8_T + 0)
typedef signed char int8_t;
#endif
#define SIZE_UINT8_T ${SIZE_UINT8_T}
#if ! (SIZE_UINT8_T + 0)
typedef unsigned char uint8_t;
#endif
